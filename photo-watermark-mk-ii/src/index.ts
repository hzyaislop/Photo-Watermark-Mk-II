import { app, BrowserWindow, ipcMain, dialog } from 'electron';
import path from 'path';
import fs from 'fs';
import sharp from 'sharp';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const IMAGE_EXTENSIONS = ['jpg', 'jpeg', 'png', 'bmp', 'tiff'];

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

async function handleFileOpen() {
  const { canceled, filePaths } = await dialog.showOpenDialog({
    properties: ['openFile', 'multiSelections'],
    filters: [{ name: 'Images', extensions: IMAGE_EXTENSIONS }],
  });
  if (canceled) {
    return [];
  }
  return filePaths;
}

async function handleDirectoryOpen() {
  const { canceled, filePaths } = await dialog.showOpenDialog({
    properties: ['openDirectory'],
  });
  if (canceled || filePaths.length === 0) {
    return [];
  }
  const dirPath = filePaths[0];
  const filesInDir = fs.readdirSync(dirPath);
  const imageFiles = filesInDir
    .map((file) => {
      const ext = path.extname(file).slice(1).toLowerCase();
      if (IMAGE_EXTENSIONS.includes(ext)) {
        return path.join(dirPath, file);
      }
      return null;
    })
    .filter(Boolean);
  return imageFiles;
}

async function getThumbnail(filePath: string): Promise<string> {
  try {
    const buffer = await sharp(filePath).resize(100, 100, { fit: 'inside' }).toBuffer();
    return `data:image/png;base64,${buffer.toString('base64')}`;
  } catch (error) {
    console.error('Failed to generate thumbnail:', error);
    return null; // Or a path to a default placeholder image
  }
}

async function handleDroppedPaths(paths: string[]): Promise<string[]> {
  const allImageFiles: string[] = [];

  for (const droppedPath of paths) {
    try {
      const stats = fs.statSync(droppedPath);
      if (stats.isDirectory()) {
        const filesInDir = fs.readdirSync(droppedPath);
        const imageFilesInDir = filesInDir
          .map((file) => {
            const ext = path.extname(file).slice(1).toLowerCase();
            if (IMAGE_EXTENSIONS.includes(ext)) {
              return path.join(droppedPath, file);
            }
            return null;
          })
          .filter(Boolean);
        allImageFiles.push(...imageFilesInDir);
      } else if (stats.isFile()) {
        const ext = path.extname(droppedPath).slice(1).toLowerCase();
        if (IMAGE_EXTENSIONS.includes(ext)) {
          allImageFiles.push(droppedPath);
        }
      }
    } catch (error) {
      console.error(`Error processing dropped path ${droppedPath}:`, error);
    }
  }

  return allImageFiles;
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  ipcMain.handle('dialog:openFiles', handleFileOpen);
  ipcMain.handle('dialog:openDirectory', handleDirectoryOpen);
  ipcMain.handle('path:basename', (event, filePath) => {
    return path.basename(filePath);
  });
  ipcMain.handle('image:getThumbnail', (event, filePath) => {
    return getThumbnail(filePath);
  });
  ipcMain.handle('app:handleDroppedPaths', (event, paths) => handleDroppedPaths(paths));
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
