import { app, BrowserWindow, ipcMain, dialog } from 'electron';
import path from 'path';
import fs from 'fs';
import sharp from 'sharp';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const IMAGE_EXTENSIONS = ['jpg', 'jpeg', 'png', 'bmp', 'tiff'];

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

async function handleFileOpen() {
  const { canceled, filePaths } = await dialog.showOpenDialog({
    properties: ['openFile', 'multiSelections'],
    filters: [{ name: 'Images', extensions: IMAGE_EXTENSIONS }],
  });
  if (canceled) {
    return [];
  }
  return filePaths;
}

async function handleDirectoryOpen() {
  const { canceled, filePaths } = await dialog.showOpenDialog({
    properties: ['openDirectory'],
  });
  if (canceled || filePaths.length === 0) {
    return [];
  }
  const dirPath = filePaths[0];
  const filesInDir = fs.readdirSync(dirPath);
  const imageFiles = filesInDir
    .map((file) => {
      const ext = path.extname(file).slice(1).toLowerCase();
      if (IMAGE_EXTENSIONS.includes(ext)) {
        return path.join(dirPath, file);
      }
      return null;
    })
    .filter(Boolean);
  return imageFiles;
}

async function getThumbnail(filePath: string): Promise<string> {
  try {
    const buffer = await sharp(filePath).resize(100, 100, { fit: 'inside' }).toBuffer();
    return `data:image/png;base64,${buffer.toString('base64')}`;
  } catch (error) {
    console.error('Failed to generate thumbnail:', error);
    return null; // Or a path to a default placeholder image
  }
}

async function handleDroppedPaths(paths: string[]): Promise<string[]> {
  const allImageFiles: string[] = [];

  for (const droppedPath of paths) {
    try {
      const stats = fs.statSync(droppedPath);
      if (stats.isDirectory()) {
        const filesInDir = fs.readdirSync(droppedPath);
        const imageFilesInDir = filesInDir
          .map((file) => {
            const ext = path.extname(file).slice(1).toLowerCase();
            if (IMAGE_EXTENSIONS.includes(ext)) {
              return path.join(droppedPath, file);
            }
            return null;
          })
          .filter(Boolean);
        allImageFiles.push(...imageFilesInDir);
      } else if (stats.isFile()) {
        const ext = path.extname(droppedPath).slice(1).toLowerCase();
        if (IMAGE_EXTENSIONS.includes(ext)) {
          allImageFiles.push(droppedPath);
        }
      }
    } catch (error) {
      console.error(`Error processing dropped path ${droppedPath}:`, error);
    }
  }

  return allImageFiles;
}

type PresetPosition =
  | 'north'
  | 'northeast'
  | 'east'
  | 'southeast'
  | 'south'
  | 'southwest'
  | 'west'
  | 'northwest'
  | 'center';

interface WatermarkOptions {
  text: string;
  size: number;
  color: string;
  opacity: number; // 0 - 100
  mode: 'preset' | 'custom';
  position?: PresetPosition;
  offsetX?: number; // 0 - 1
  offsetY?: number; // 0 - 1
}

async function applyWatermark(filePath: string, options: WatermarkOptions): Promise<string> {
  try {
    const { text, size, color, position = 'center', opacity, mode = 'preset', offsetX, offsetY } = options;

    const image = sharp(filePath);
    const metadata = await image.metadata();
    const width = metadata.width ?? 1000;
    const height = metadata.height ?? 1000;
    const marginX = Math.max(width * 0.05, size);
    const marginY = Math.max(height * 0.05, size);
    const opacityValue = Math.min(Math.max(opacity ?? 100, 0), 100) / 100;

    const clamp = (value: number, min: number, max: number) => Math.min(Math.max(value, min), max);

    const escapeText = (value: string) =>
      value.replace(/[&<>"']+/g, (match) => {
        const map: Record<string, string> = {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          "'": '&apos;',
        };
        return map[match];
      });

    const getPositionAttributes = () => {
      switch (position) {
        case 'north':
          return { x: width / 2, y: marginY, anchor: 'middle', baseline: 'hanging' };
        case 'northeast':
          return { x: width - marginX, y: marginY, anchor: 'end', baseline: 'hanging' };
        case 'east':
          return { x: width - marginX, y: height / 2, anchor: 'end', baseline: 'middle' };
        case 'southeast':
          return { x: width - marginX, y: height - marginY, anchor: 'end', baseline: 'text-after-edge' };
        case 'south':
          return { x: width / 2, y: height - marginY, anchor: 'middle', baseline: 'text-after-edge' };
        case 'southwest':
          return { x: marginX, y: height - marginY, anchor: 'start', baseline: 'text-after-edge' };
        case 'west':
          return { x: marginX, y: height / 2, anchor: 'start', baseline: 'middle' };
        case 'northwest':
          return { x: marginX, y: marginY, anchor: 'start', baseline: 'hanging' };
        case 'center':
        default:
          return { x: width / 2, y: height / 2, anchor: 'middle', baseline: 'middle' };
      }
    };

    const useCustomPosition = mode === 'custom' && typeof offsetX === 'number' && typeof offsetY === 'number';

    const { x, y, anchor, baseline } = useCustomPosition
      ? {
          x: clamp(offsetX, 0, 1) * width,
          y: clamp(offsetY, 0, 1) * height,
          anchor: 'middle',
          baseline: 'middle',
        }
      : getPositionAttributes();

    const svgText = `
      <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
        <style>
          .title { fill: ${color}; font-size: ${size}px; font-family: Arial, sans-serif; fill-opacity: ${opacityValue}; }
        </style>
        <text x="${x}" y="${y}" text-anchor="${anchor}" dominant-baseline="${baseline}" class="title">${escapeText(text)}</text>
      </svg>
    `;

    const svgBuffer = Buffer.from(svgText);

    const watermarkedBuffer = await image
      .composite([
        {
          input: svgBuffer,
        },
      ])
      .toBuffer();

    return `data:image/png;base64,${watermarkedBuffer.toString('base64')}`;
  } catch (error) {
    console.error('Failed to apply watermark:', error);
    return null;
  }
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  ipcMain.handle('dialog:openFiles', handleFileOpen);
  ipcMain.handle('dialog:openDirectory', handleDirectoryOpen);
  ipcMain.handle('path:basename', (event, filePath) => {
    return path.basename(filePath);
  });
  ipcMain.handle('image:getThumbnail', (event, filePath) => {
    return getThumbnail(filePath);
  });
  ipcMain.handle('image:applyWatermark', (event, filePath, options) => applyWatermark(filePath, options));
  ipcMain.handle('app:handleDroppedPaths', (event, paths) => handleDroppedPaths(paths));
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
