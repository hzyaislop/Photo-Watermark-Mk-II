import { app, BrowserWindow, ipcMain, dialog } from 'electron';
import path from 'path';
import fs from 'fs';
import crypto from 'crypto';
import sharp from 'sharp';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const IMAGE_EXTENSIONS = ['jpg', 'jpeg', 'png', 'bmp', 'tiff'];
const CONFIG_FILE_NAME = 'watermark-config.json';
type ExportFormat = 'source' | 'png' | 'jpeg';

interface BatchExportOptions {
  outputDir: string;
  namingMode: 'original' | 'prefix' | 'suffix';
  prefix?: string;
  suffix?: string;
  format: ExportFormat;
}

interface BatchExportPayload {
  filePaths: string[];
  watermarkOptions: WatermarkOptions;
  exportOptions: BatchExportOptions;
}

interface BatchExportFailure {
  file: string;
  reason: string;
}

interface BatchExportSummary {
  successCount: number;
  failureCount: number;
  failures: BatchExportFailure[];
}

interface ExportProgressPayload {
  processed: number;
  total: number;
  currentFile: string;
}

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

async function handleFileOpen() {
  const { canceled, filePaths } = await dialog.showOpenDialog({
    properties: ['openFile', 'multiSelections'],
    filters: [{ name: 'Images', extensions: IMAGE_EXTENSIONS }],
  });
  if (canceled) {
    return [];
  }
  return filePaths;
}

async function handleDirectoryOpen() {
  const { canceled, filePaths } = await dialog.showOpenDialog({
    properties: ['openDirectory'],
  });
  if (canceled || filePaths.length === 0) {
    return [];
  }
  const dirPath = filePaths[0];
  const filesInDir = fs.readdirSync(dirPath);
  const imageFiles = filesInDir
    .map((file) => {
      const ext = path.extname(file).slice(1).toLowerCase();
      if (IMAGE_EXTENSIONS.includes(ext)) {
        return path.join(dirPath, file);
      }
      return null;
    })
    .filter(Boolean);
  return imageFiles;
}

async function getThumbnail(filePath: string): Promise<string> {
  try {
    const buffer = await sharp(filePath).resize(100, 100, { fit: 'inside' }).toBuffer();
    return `data:image/png;base64,${buffer.toString('base64')}`;
  } catch (error) {
    console.error('Failed to generate thumbnail:', error);
    return null; // Or a path to a default placeholder image
  }
}

async function handleDroppedPaths(paths: string[]): Promise<string[]> {
  const allImageFiles: string[] = [];

  for (const droppedPath of paths) {
    try {
      const stats = fs.statSync(droppedPath);
      if (stats.isDirectory()) {
        const filesInDir = fs.readdirSync(droppedPath);
        const imageFilesInDir = filesInDir
          .map((file) => {
            const ext = path.extname(file).slice(1).toLowerCase();
            if (IMAGE_EXTENSIONS.includes(ext)) {
              return path.join(droppedPath, file);
            }
            return null;
          })
          .filter(Boolean);
        allImageFiles.push(...imageFilesInDir);
      } else if (stats.isFile()) {
        const ext = path.extname(droppedPath).slice(1).toLowerCase();
        if (IMAGE_EXTENSIONS.includes(ext)) {
          allImageFiles.push(droppedPath);
        }
      }
    } catch (error) {
      console.error(`Error processing dropped path ${droppedPath}:`, error);
    }
  }

  return allImageFiles;
}

type PresetPosition =
  | 'north'
  | 'northeast'
  | 'east'
  | 'southeast'
  | 'south'
  | 'southwest'
  | 'west'
  | 'northwest'
  | 'center';

interface WatermarkOptions {
  text: string;
  size: number;
  color: string;
  opacity: number; // 0 - 100
  mode: 'preset' | 'custom';
  position?: PresetPosition;
  offsetX?: number; // 0 - 1
  offsetY?: number; // 0 - 1
}

const DEFAULT_WATERMARK_OPTIONS: WatermarkOptions = {
  text: 'Hello World',
  size: 50,
  color: '#ffffff',
  opacity: 100,
  mode: 'preset',
  position: 'center',
  offsetX: 0.5,
  offsetY: 0.5,
};

interface WatermarkTemplate {
  id: string;
  name: string;
  createdAt: string;
  options: WatermarkOptions;
}

interface AppConfig {
  templates: WatermarkTemplate[];
  lastUsedOptions: WatermarkOptions;
  lastUsedTemplateId: string | null;
}

const clone = <T>(value: T): T => JSON.parse(JSON.stringify(value));

let cachedConfig: AppConfig | null = null;

const getConfigFilePath = () => path.join(app.getPath('userData'), CONFIG_FILE_NAME);

const getDefaultConfig = (): AppConfig => ({
  templates: [],
  lastUsedOptions: clone(DEFAULT_WATERMARK_OPTIONS),
  lastUsedTemplateId: null,
});

const normalizeOptions = (options?: Partial<WatermarkOptions>): WatermarkOptions => {
  const base = clone(DEFAULT_WATERMARK_OPTIONS);
  return {
    ...base,
    ...options,
  };
};

const normalizeConfig = (config: Partial<AppConfig> | null | undefined): AppConfig => {
  if (!config) {
    return getDefaultConfig();
  }
  const templates: WatermarkTemplate[] = Array.isArray(config.templates)
    ? config.templates
        .map((tpl) => {
          if (!tpl || typeof tpl !== 'object') {
            return null;
          }
          const id = typeof tpl.id === 'string' && tpl.id ? tpl.id : crypto.randomUUID();
          const name = typeof tpl.name === 'string' && tpl.name.trim() ? tpl.name.trim() : '未命名模板';
          const createdAt = typeof tpl.createdAt === 'string' ? tpl.createdAt : new Date().toISOString();
          return {
            id,
            name,
            createdAt,
            options: normalizeOptions(tpl.options as WatermarkOptions),
          };
        })
        .filter((tpl): tpl is WatermarkTemplate => Boolean(tpl))
    : [];

  const lastUsedTemplateId =
    typeof config.lastUsedTemplateId === 'string' ? config.lastUsedTemplateId : null;

  return {
    templates,
    lastUsedOptions: normalizeOptions(config.lastUsedOptions),
    lastUsedTemplateId,
  };
};

const writeConfigToDisk = async (config: AppConfig) => {
  const filePath = getConfigFilePath();
  const payload = JSON.stringify(config, null, 2);
  await fs.promises.mkdir(path.dirname(filePath), { recursive: true });
  await fs.promises.writeFile(filePath, payload, 'utf-8');
};

const readConfigFromDisk = async (): Promise<AppConfig> => {
  const filePath = getConfigFilePath();
  try {
    const raw = await fs.promises.readFile(filePath, 'utf-8');
    const parsed = JSON.parse(raw);
    return normalizeConfig(parsed);
  } catch (error) {
    if ((error as NodeJS.ErrnoException)?.code !== 'ENOENT') {
      console.error('读取配置文件失败，使用默认配置继续:', error);
    }
    const fallback = getDefaultConfig();
    await writeConfigToDisk(fallback);
    return fallback;
  }
};

const getAppConfig = async (): Promise<AppConfig> => {
  if (cachedConfig) {
    return clone(cachedConfig);
  }
  const config = await readConfigFromDisk();
  cachedConfig = clone(config);
  return clone(config);
};

const persistConfig = async (config: AppConfig) => {
  const normalized = normalizeConfig(config);
  await writeConfigToDisk(normalized);
  cachedConfig = clone(normalized);
};

const saveTemplateToConfig = async (name: string, options: WatermarkOptions) => {
  const trimmedName = name.trim();
  if (!trimmedName) {
    throw new Error('模板名称不能为空');
  }

  const config = await getAppConfig();
  const template: WatermarkTemplate = {
    id: crypto.randomUUID(),
    name: trimmedName,
    createdAt: new Date().toISOString(),
    options: normalizeOptions(options),
  };

  config.templates.push(template);
  config.lastUsedTemplateId = template.id;
  config.lastUsedOptions = normalizeOptions(options);

  await persistConfig(config);

  return {
    templates: config.templates,
    templateId: template.id,
  };
};

const deleteTemplateFromConfig = async (templateId: string) => {
  const config = await getAppConfig();
  const nextTemplates = config.templates.filter((tpl) => tpl.id !== templateId);
  if (nextTemplates.length === config.templates.length) {
    throw new Error('未找到指定的模板');
  }

  config.templates = nextTemplates;
  if (config.lastUsedTemplateId === templateId) {
    config.lastUsedTemplateId = null;
  }

  await persistConfig(config);

  return {
    templates: config.templates,
    lastUsedTemplateId: config.lastUsedTemplateId,
  };
};

const updateLastUsedInConfig = async (options: WatermarkOptions, templateId?: string | null) => {
  const config = await getAppConfig();
  const normalizedOptions = normalizeOptions(options);
  const normalizedTemplateId = templateId ?? null;

  const hasOptionsChanged = JSON.stringify(config.lastUsedOptions) !== JSON.stringify(normalizedOptions);
  const hasTemplateChanged = config.lastUsedTemplateId !== normalizedTemplateId;

  if (!hasOptionsChanged && !hasTemplateChanged) {
    return;
  }

  config.lastUsedOptions = normalizedOptions;
  config.lastUsedTemplateId = normalizedTemplateId;
  await persistConfig(config);
};

const clamp = (value: number, min: number, max: number) => Math.min(Math.max(value, min), max);

const escapeText = (value: string) =>
  value.replace(/[&<>"']+/g, (match) => {
    const map: Record<string, string> = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&apos;',
    };
    return map[match];
  });

const RESERVED_FILENAME_CHARACTERS = new Set(['<', '>', ':', '"', '/', '\\', '|', '?', '*']);

const sanitizeFileName = (value: string) =>
  value
    .split('')
    .map((char) => {
      if (RESERVED_FILENAME_CHARACTERS.has(char) || char.charCodeAt(0) < 32) {
        return '_';
      }
      return char;
    })
    .join('');

const resolveFormat = (requested: ExportFormat | undefined, sourceExtension: string): 'jpeg' | 'png' => {
  if (requested && requested !== 'source') {
    return requested;
  }
  const normalized = sourceExtension.toLowerCase();
  if (normalized === 'jpg' || normalized === 'jpeg') {
    return 'jpeg';
  }
  return 'png';
};

const ensureUniqueFilePath = async (dir: string, fileName: string): Promise<string> => {
  let candidate = fileName;
  const ext = path.extname(fileName);
  const baseName = path.basename(fileName, ext);
  let counter = 1;
  while (fs.existsSync(path.join(dir, candidate))) {
    candidate = `${baseName}(${counter})${ext}`;
    counter += 1;
  }
  return path.join(dir, candidate);
};

const buildOutputFileName = (filePath: string, options: BatchExportOptions, format: 'jpeg' | 'png'): string => {
  const originalExt = path.extname(filePath);
  const baseName = path.basename(filePath, originalExt);
  let composed = baseName;

  if (options.namingMode === 'prefix') {
    composed = `${options.prefix ?? ''}${composed}`;
  } else if (options.namingMode === 'suffix') {
    composed = `${composed}${options.suffix ?? ''}`;
  }

  const sanitized = sanitizeFileName(composed);
  const extension = format === 'jpeg' ? '.jpg' : '.png';
  return `${sanitized}${extension}`;
};

async function generateWatermarkedBuffer(
  filePath: string,
  options: WatermarkOptions,
  formatPreference: ExportFormat,
): Promise<{ buffer: Buffer; format: 'jpeg' | 'png' } | null> {
  try {
    const { text, size, color, position = 'center', opacity, mode = 'preset', offsetX, offsetY } = options;

    const image = sharp(filePath);
    const metadata = await image.metadata();
    const width = metadata.width ?? 1000;
    const height = metadata.height ?? 1000;
    const marginX = Math.max(width * 0.05, size);
    const marginY = Math.max(height * 0.05, size);
    const opacityValue = Math.min(Math.max(opacity ?? 100, 0), 100) / 100;

    const useCustomPosition = mode === 'custom' && typeof offsetX === 'number' && typeof offsetY === 'number';

    const getPositionAttributes = (): { x: number; y: number; anchor: string; baseline: string } => {
      switch (position) {
        case 'north':
          return { x: width / 2, y: marginY, anchor: 'middle', baseline: 'hanging' };
        case 'northeast':
          return { x: width - marginX, y: marginY, anchor: 'end', baseline: 'hanging' };
        case 'east':
          return { x: width - marginX, y: height / 2, anchor: 'end', baseline: 'middle' };
        case 'southeast':
          return { x: width - marginX, y: height - marginY, anchor: 'end', baseline: 'text-after-edge' };
        case 'south':
          return { x: width / 2, y: height - marginY, anchor: 'middle', baseline: 'text-after-edge' };
        case 'southwest':
          return { x: marginX, y: height - marginY, anchor: 'start', baseline: 'text-after-edge' };
        case 'west':
          return { x: marginX, y: height / 2, anchor: 'start', baseline: 'middle' };
        case 'northwest':
          return { x: marginX, y: marginY, anchor: 'start', baseline: 'hanging' };
        case 'center':
        default:
          return { x: width / 2, y: height / 2, anchor: 'middle', baseline: 'middle' };
      }
    };

    const { x, y, anchor, baseline } = useCustomPosition
      ? {
          x: clamp(offsetX, 0, 1) * width,
          y: clamp(offsetY, 0, 1) * height,
          anchor: 'middle',
          baseline: 'middle',
        }
      : getPositionAttributes();

    const svgText = `
      <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
        <style>
          .title { fill: ${color}; font-size: ${size}px; font-family: Arial, sans-serif; fill-opacity: ${opacityValue}; }
        </style>
        <text x="${x}" y="${y}" text-anchor="${anchor}" dominant-baseline="${baseline}" class="title">${escapeText(text)}</text>
      </svg>
    `;

    const svgBuffer = Buffer.from(svgText);
    const finalFormat = resolveFormat(formatPreference, path.extname(filePath).slice(1));

    const watermarkedBuffer = await image
      .composite([
        {
          input: svgBuffer,
        },
      ])
      .toFormat(finalFormat)
      .toBuffer();

    return { buffer: watermarkedBuffer, format: finalFormat };
  } catch (error) {
    console.error('Failed to generate watermarked buffer:', error);
    return null;
  }
}

async function applyWatermark(filePath: string, options: WatermarkOptions): Promise<string> {
  try {
    const result = await generateWatermarkedBuffer(filePath, options, 'png');
    if (!result) {
      return null;
    }
    return `data:image/${result.format};base64,${result.buffer.toString('base64')}`;
  } catch (error) {
    console.error('Failed to apply watermark:', error);
    return null;
  }
}

async function handleBatchExport(
  event: Electron.IpcMainInvokeEvent,
  payload: BatchExportPayload,
): Promise<BatchExportSummary> {
  const { filePaths, watermarkOptions, exportOptions } = payload;
  if (!Array.isArray(filePaths) || filePaths.length === 0) {
    throw new Error('没有可导出的文件');
  }

  const normalizedOutputDir = path.resolve(exportOptions.outputDir ?? '');
  if (!normalizedOutputDir) {
    throw new Error('请选择导出文件夹');
  }

  const hasSameDirectory = filePaths.some(
    (filePath) => path.resolve(path.dirname(filePath)) === normalizedOutputDir,
  );

  if (hasSameDirectory) {
    throw new Error('默认禁止导出到原文件夹，请选择其他目录。');
  }

  await fs.promises.mkdir(normalizedOutputDir, { recursive: true });

  const failures: BatchExportFailure[] = [];
  let successCount = 0;
  const total = filePaths.length;
  let processed = 0;

  for (const filePath of filePaths) {
    const baseName = path.basename(filePath);
    try {
      const generated = await generateWatermarkedBuffer(filePath, watermarkOptions, exportOptions.format);
      if (!generated) {
        throw new Error('水印生成失败');
      }

      const targetName = buildOutputFileName(filePath, exportOptions, generated.format);
      const outputPath = await ensureUniqueFilePath(normalizedOutputDir, targetName);
      await fs.promises.writeFile(outputPath, generated.buffer);
      successCount += 1;
    } catch (error) {
      const reason = error instanceof Error ? error.message : '未知错误';
      failures.push({ file: baseName, reason });
    } finally {
      processed += 1;
      const progressPayload: ExportProgressPayload = {
        processed,
        total,
        currentFile: baseName,
      };
      event.sender.send('export:progress', progressPayload);
    }
  }

  return {
    successCount,
    failureCount: failures.length,
    failures,
  };
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(async () => {
  try {
    await getAppConfig();
  } catch (error) {
    console.error('初始化配置文件失败:', error);
  }

  ipcMain.handle('dialog:openFiles', handleFileOpen);
  ipcMain.handle('dialog:openDirectory', handleDirectoryOpen);
  ipcMain.handle('dialog:selectExportDirectory', async () => {
    const { canceled, filePaths } = await dialog.showOpenDialog({
      properties: ['openDirectory', 'createDirectory'],
    });
    if (canceled || filePaths.length === 0) {
      return null;
    }
    return filePaths[0];
  });
  ipcMain.handle('path:basename', (event, filePath) => {
    return path.basename(filePath);
  });
  ipcMain.handle('image:getThumbnail', (event, filePath) => {
    return getThumbnail(filePath);
  });
  ipcMain.handle('image:applyWatermark', (event, filePath, options) => applyWatermark(filePath, options));
  ipcMain.handle('app:handleDroppedPaths', (event, paths) => handleDroppedPaths(paths));
  ipcMain.handle('export:runBatch', (event, payload: BatchExportPayload) => handleBatchExport(event, payload));
  ipcMain.handle('config:getState', async () => {
    const config = await getAppConfig();
    return config;
  });
  ipcMain.handle('config:saveTemplate', async (_event, payload: { name: string; options: WatermarkOptions }) => {
    return saveTemplateToConfig(payload.name, payload.options);
  });
  ipcMain.handle('config:deleteTemplate', async (_event, templateId: string) => {
    return deleteTemplateFromConfig(templateId);
  });
  ipcMain.handle(
    'config:updateLastUsed',
    async (_event, payload: { options: WatermarkOptions; templateId?: string | null }) => {
      await updateLastUsedInConfig(payload.options, payload.templateId);
      return null;
    },
  );
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
